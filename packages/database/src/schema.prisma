generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id           String   @id @default(cuid())
  email        String?  @unique
  phone        String   @unique
  name         String?
  username     String   @unique
  fathersName  String?
  password     String?
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Relations
  role          UserRole    @default(CUSTOMER)
  address       Address?
  connection    Connection?
  subscriptions Subscription[]
  payments      Payment[]

  @@index([id, phone, username, email])
}

model Address {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  street    String
  city      String
  state     String?
  zip       String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Connection {
  id        String   @id @default(cuid())
  userId    String   @unique
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  poppeUserName String?
  poppeUserPassword String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model InternetPackage {
  id          String   @id @default(cuid())
  name        String
  price       Float
  speed       Int      // in Mbps
  description String?
  duration    Int      // in days
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  subscriptions Subscription[]
}

model Subscription {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  packageId String
  package   InternetPackage @relation(fields: [packageId], references: [id])
  startDate DateTime @default(now())
  endDate   DateTime
  status    SubscriptionStatus @default(PENDING)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  payments Payment[]

  @@index([userId])
  @@index([packageId])
}

model Payment {
  id                   String        @id @default(cuid())
  paymentId            String        @unique  // bKash payment ID
  trxId                String?       @unique  // bKash transaction ID
  userId               String
  user                 User          @relation(fields: [userId], references: [id], onDelete: Cascade)
  subscriptionId       String
  subscription         Subscription  @relation(fields: [subscriptionId], references: [id], onDelete: Cascade)
  amount              Float
  currency            String        @default("BDT")
  payerReference      String?
  merchantInvoiceNumber String
  paymentMethod       PaymentMethod @default(BKASH)
  status              PaymentStatus @default(CREATED)
  meta                Json?         @db.JsonB // Store additional payment details
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  rechargeAgentId     String?
  

  @@map("payments")
  @@index([userId])
  @@index([subscriptionId])
  @@index([rechargeAgentId])
}

enum SubscriptionStatus {
  PENDING
  ACTIVE
  EXPIRED
  CANCELLED
  SUSPENDED
  FAILED
}

enum PaymentStatus {
  CREATED
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}

enum PaymentMethod {
  BKASH
  CASH
  BANK_TRANSFER
}

enum UserRole {
  ADMIN
  RECHARGE_AGENT
  CUSTOMER
}
